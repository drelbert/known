Known

//Middleware and app.js 
How do I know which app.use line is the app logic that does the res?
Originally its the routes/index.js file in form generated when app was created

In original form, the anonymous function that runs this code
router.get ('/', function(req, res) 
    res.render('index', (title: 'Known'));
is really the controller

//Heroku
Added
Profile
will tell Heroku that the app needs a web process and should run 
npm start 

Creating on Heroku
one - code is in a local Git repo 
and
two - create a remote repo on Heroku with this command 
heroku create 
and the result is 
Creating app... done, ⬢ intense-river-13488
https://intense-river-13488.herokuapp.com/ | https://git.heroku.com/intense-river-13488.git

this only creates a remote repo on Heroku
adding the code is next 


//Using Git to Update to Heroku
to update files enter each and only wait after 'git commit' and 'git push'
    git add --all
    git commit -m 'Some message about the commit'
    git push heroku master 


//TODO add commands here 
 for starting production
 and production nodemon 









//URL Path definition 
Collection
projects
Screen List/Launch(Home)
lists of projects, opportunities 
URL Path
/

Collection
projects 
Screen 
details 
URL Path 
/projects 

Collection
projects 
Screen 
details add 
URL Path
/project/add

Collection
about 
Screen 
details 
URL Path 
/about

//Starting Mongo 
mongod 

mongo 
for  using below commands 

//Building a Mongo DB
mongo commands 
show dbs
use '  '
db.collection.find().pretty
db.collection.update({
    key: value,
    key: value
})



//MLab
mongolab-rugged-78147 as MONGODB_URI

breakdown  
    mongodb:// = MongoDB protocol
    username = heroku_bf9tx0rq 
    password = 4o7hgbeftgukc62i3hb94mp6gl
    server address(host name) = @ds163402.mlab.com
    port = 63402
    db name = heroku_bf9tx0rq


view into db on mLab use
$ mongo ds163402.mlab.com:63402/heroku_bf9tx0rq -u heroku_bf9tx0rq  -p 4o7hgbeftgukc62i3hb94mp6gl


//Using Heroku and mLab
first
To start app in production mode with connection to mLab use this command 
//Testing locally by using this line  
    NODE_ENV=production MONGODB_URI=mongodb://heroku_bf9tx0rq:4o7hgbeftgukc62i3hb94mp6gl@ds163402.mlab.com:63402/heroku_bf9tx0rq nodemon

entered in one line in terminal 

then nav to 
    localhost:3000


//Testing on Heroku by first commiting changes 
git add --all
git commit –m 'add commi tmessage here'
git push heroku master

view the logs with 
heroku logs 



Global name for Heroko add-on 
    mongolab-rugged-78147

Pushing data 
dump 
     mongodump -h localhost:27017 -d known

restore
    first make sure that both files from 'dump' are at the top level of the file 
        then go
    mongorestore -h ds163402.mlab.com:63402 -d heroku_bf9tx0rq -u heroku_bf9tx0rq  -p 4o7hgbeftgukc62i3hb94mp6gl dump/





//REST API DB exposure 

REST is a stateless protocol 
API allows apps to talk with each other 

In the MEAN stack, REST API is for a stateless interface with DB 


//Mongo/Mopngoose Query Methods
find 
findById 
    this method is straighforward, accepting a single parameter, the ID to look for
findOne 

//Adding error trapping 
Three errors to trap 
No project Id or similar missing Id 
The methods (.find or .findById) do not return a location
The methods return an error 


//Mongo/Mongoose POST methods 
POST = creating docs in the db and returning saved data as confirmation
Take posted data and use it to create a JavaScript object, matching the shcema
Send and appropriate res in the callback dep on succes or failure of the create operation

//Put methods 
PUT methods update existing docs or subdocuments in the db and return saved data as confirmation 
Similar to POST but diff in that the prexisting doc is updated 

//DELETE methods 
see the controller in app_api


//Consuming a REST API
Using an API inside Express 

//Calling an API from Express 
How to call the API from Express?

The Express app needs to be able to call the API URLs

request 
module 
will be used for this
just like any other packages 

Using the request module 
Four common req options
url    this is required 
method  not required, but defaults to GET (can be POST, PUT, DELETE)
json    this is required 
qs      not required 


//Adding data to the db via the API
steps 
create a route for the form to POST to 
send the new project data to the API 
show the new project 

NOTE = this same process needs to be completed for updating the project 


//Angular 
Building blocks  
two things 
components = handles specific piece of functionality 
modules = two ore more components working together 

//run known-public
use = ng serve 

//Source code research 
src/app 

nav to 4200


the main module 
this is the central point of the the Angular module where all the components are brought together 
app.module.ts 

along side this module are the 
app.component
.css 
.html
.ts 

The CSS and HTML files define the stypes and markup for the component
While the TS defines the TypeScript behaviour 

In Angular {{ }}
denote a binding between the data and the view 

Tying it all together 
the component AppComponent comprises 3 files 
    .ts
    .html
    .css 
the .ts file is the key part of the component = 
    defining the the functionality referencing the other files and declaring which selector(HTML tag) it will bind to
the component .ts file exports the AppComponent class 
the module file imports the AppComponent class from the component .ts file and declares it as the entry point in the application 
the module file also imports various pieces of native Angular functionality

//The Angular build process 
Dealing with issue of TS and JS, where TS is not read in browser 
done by converting TS into vanilla JS then puts them into one file  
which is called the main.bundle.js 


//Working with Angular Components 
Create home-list and set it as default component 


Note: using ng serve 
is for dev only
Once app is in right condition,
then the 'build' folder is created and app
is in production 



//Ch 9 Build SPA w Angular 
How?
Navigate between pages in Angular 
Working with Angular router 
Architechture best practices for an SPA 
Building up views through multiple components
Inject HTML into bindings 


//Transition 
from using Express server 
to 
running everything in the browser with Angular  
note = essentially recreating the main app as an
Angular SPA 
and moving the app logic from the back 
to the front end 




//Color Pallete
https://www.color-hex.com/color-palette/18601



//Chapter 10 
Project details page 
layout 

components 
framework 
    details page 
        page header 
        project page details
        sidebar 


//HTTP work 
//POST
known-data-service 
has
    public postNewProject

add-projects 
has 
    postNewProject



//GET 
know-data-service 
has
    getProjects 

home-list 
has 
    getProjects


//Workflow for updating POST 
    ensure that the key:value pairs match 
    for 
        home-list 
        and 
        details-page 
 
//Using the SPA 
Updating Express to deliver Angular as front-end rather than Pug 


//Bug with Heroku and mLab db connection 
the build as of now 
db = MongoDB
API, Express, Node.js
SPA = Angular/AngularJS 



//Ch 11 Auth Users, Mng Session, Secure API
//Authentication 
traditionally 
    server reserves resources for each user to maintain session info 
    BUT Node and Express don't maintain sessions for each user = 
        the entire app for all users runs on one thread 
    
    and if using a server-side app based on Express
        a db is used to store the data 
        in this case MongoDB 
            another option = Redis key-value store 

    The actual approach 
        adding authentication to an SPA hitting an API for data 

//MEAN Approach 
Two problems to deal with 
    API is stateless since Node and Express have no concept of user sessions 

    App logic is already delivered to the browser meaning that the code that get's delivered cannot be limited 

Solution 
    Maintain some sort of session state in the browser 
        letting the app choose what does/not display to the current user  

JSON Web Tokens aka tokens 
    Keeps user data in the browser to maintain a session 

    Basically 
        JWT = JSON object encrypted into a string and is meaningless to the human eye  
        BUT can be decoded and understood by both the app and server  

Securelly Calling the API 
    Given restrictions to app for certain users 
    Only auth users can perform certain actions

 


Dont forget material.io 


